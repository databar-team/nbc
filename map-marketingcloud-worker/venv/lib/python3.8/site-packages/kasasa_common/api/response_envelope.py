from typing import Any, Dict, List, Union

from flask_restplus import fields, Model, marshal


class ResponseEnvelope:

    def __init__(self, model: Union[Dict[str, fields.Raw], Model]):
        """
        ResponseEnvelope is used to create standardized REST API response bodies.

        :param model: Defines how the data in the response body should be formatted.
        """
        self.model = model

    def create_single_result_response(self, data: Union[Dict[str, Any], object]):
        """
        To create an HTTP response body of a single result.

        :param data: This data will be formatted based on the fields defined in `self.model`
            and then included in the data field of the returned dictionary. A field included
            in data but not in the model will be left out of the response. A field in the
            model but not in the data will be `None` in the response.
        :return: Dictionary to be translated to JSON for an HTTP response body.
        """
        response = {
            "data": data
        }

        model = Model('SingleResultResponse', {
            'data': fields.Nested(self.model, description='result of the request')
        })

        return marshal(response, model)

    def create_collection_response(self, data: Union[List[Dict[str, Any]], List[object]]):
        """
        To create an HTTP response body of a collection of results including paging metadata.

        :param data: The items in this list will be formatted based on the fields defined in `self.model`
            and then included in the data field of the returned dictionary. A field included
            in a data item but not in the model will be left out of the response. A field in the
            model but not in a data item will be `None` in the response.
        :return: Dictionary to be translated to JSON for an HTTP response body.
        """
        response = {
            "data": data,
            "paging": {
                "totalResults": len(data)
            }
        }

        model = Model('CollectionResponse', {
            'data': fields.List(fields.Nested(self.model, description='results of the request')),
            'paging': fields.Nested({'totalResults': fields.Integer}, description='number of results')
        })

        return marshal(response, model)

    def create_error_response(self, error: str):
        """
        To create an HTTP response body of an error which has occurred while proccessing the request.

        :param error: An error message to be included in the HTTP response body.
        :return: Dictionary to be translated to JSON for an HTTP response body.
        """
        response = {
            "error": {
                "message": error
            }
        }

        model = Model('ErrorResponse', {
            'error': fields.Nested({'message': fields.String}, description='error message')
        })

        return marshal(response, model)
