import threading
from typing import Dict


class EventManager:

    def __init__(self):
        self._lock = threading.Lock()
        self.events: Dict[str, threading.Event] = {}

    def add_event(self, name):
        """
        Adds an event to the manager replacing an event with a new event if it already exists.
        :param name: Name of the event to create an event for
        :return: 
        """
        with self._lock:
            self.events[name] = threading.Event()

    def set(self, name):
        """
        Marks the event as set, which for our purposes generally means complete.
        :param name: Name of the event to mark as set
        :return:
        """
        with self._lock:
            if self.events.get(name, None) is not None:
                self.events[name].set()

    def is_set(self) -> bool:
        """
        Checks if all events in the EventManager instance have been marked as set
        :return result: bool value of result
        """
        is_set = []
        with self._lock:
            events = self.events.values()
            for event in events:
                is_set.append(event.is_set())
        return all(is_set)
