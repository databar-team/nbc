class Context:
    """
    Interface of a context objects. This provides the context management ability to the classes
    """
    def __enter__(self):
        return self

    def __exit__(self):
        pass

    def __getitem__(self, item):
        return getattr(self, item)


class DatabaseContext(Context):
    def __init__(self, **kwargs):
        self.DATABASE_HOST = kwargs.get('DATABASE_HOST', None)
        self.DATABASE_PORT = int(kwargs.get('DATABASE_PORT', "3306"))
        self.DATABASE_USERNAME = kwargs.get('DATABASE_USERNAME', None)
        self.DATABASE_PASSWORD_KEY = kwargs.get('DATABASE_PASSWORD_KEY', None)
        self.DATABASE_NAME = kwargs.get('DATABASE_NAME', None)
        self.DATABASE_TYPE = kwargs.get('DATABASE_TYPE', 'mysql')
        self.VAULT_SECRETS = kwargs.get('VAULT_SECRETS', None)

    @property
    def attrs(self) -> dict:
        """
        Returns a dictionary of the relevant attributes that might be needed by a config. The intent here is to be able
        to get a dictionary that would be used for kwargs in an older style function/method that doesn't receive a
        context object properly.

        DATABASE_TYPE was intentionally left off as it's existence is more of a future-proof than a necessity. If we
        ever grow this library to support more than MySQL, this would be where we should configure that for the context.

        :return: dict object representing some of the attributes of the context
        """
        return dict(
            DATABASE_HOST=self.DATABASE_HOST,
            DATABASE_NAME=self.DATABASE_NAME,
            DATABASE_PORT=self.DATABASE_PORT,
            DATABASE_USERNAME=self.DATABASE_USERNAME,
            DATABASE_PASSWORD_KEY=self.DATABASE_PASSWORD_KEY,
            VAULT_SECRETS=self.VAULT_SECRETS
        )


class VaultContext(Context):
    def __init__(self, **kwargs):
        self.VAULT_ADDRESS = kwargs.get('VAULT_ADDRESS', None)
        self.VAULT_APPROLE_PATH = kwargs.get('VAULT_APPROLE_PATH', None)
        self.VAULT_APPROLE_SECRET_ID = kwargs.get('VAULT_APPROLE_SECRET_ID', None)
        self.VAULT_SECRET_KEY = kwargs.get('VAULT_SECRET_KEY', None)

    @property
    def attrs(self) -> dict:
        """
        Returns a dictionary of the relevant attributes that might be needed by a config. The intent here is to be able
        to get a dictionary that would be used for kwargs in an older style function/method that doesn't receive a
        context object properly.

        :return: dict object representing some of the attributes of the context
        """
        return dict(
            VAULT_ADDRESS=self.VAULT_ADDRESS,
            VAULT_APPROLE_PATH=self.VAULT_APPROLE_PATH,
            VAULT_APPROLE_SECRET_ID=self.VAULT_APPROLE_SECRET_ID,
            VAULT_SECRET_KEY=self.VAULT_SECRET_KEY
        )


class ProducerConsumerContext(Context):
    def __init__(self, **kwargs):
        self.QUEUE_TYPE = kwargs.get('QUEUE_TYPE', 'memory')
        self.QUEUE_KWARGS = kwargs.get('QUEUE_KWARGS', dict())
        self.MAX_CONSUMERS = int(kwargs.get('MAX_CONSUMERS', '1'))
