import os

from pathlib import Path
from dotenv import load_dotenv

from .err import ConfigurationError

def get_env_vars(required_env_vars=None, **kwargs) -> dict:
    """
    Compile all environment variables and provided kwargs into a single dictionary which can be passed into a context
    object for configuration. A 'required_env_vars' argument may be provided optionally as a list of env var keys to
    raise a ConfigurationError for missing env vars.

    :param required_env_vars: optional
    :param kwargs:
    :return:
    """
    if os.getenv('SKIP_VAULT'):
        env_path = Path('.') / '.env.local'
    else:
        env_path = Path('.') / '.env'
    load_dotenv(dotenv_path=env_path)

    if required_env_vars:
        missing_required_env_vars = [env_var for env_var in required_env_vars if env_var not in os.environ]
        if missing_required_env_vars:
            raise ConfigurationError(missing_required_env_vars)

    return {**os.environ, **kwargs}


def get_database_reader_config(**kwargs) -> dict:
    """
    Returns a dictionary object using the standard config inputs for DatabaseContext objects to represent the config
    needed to connect to a reader node on a database.

    General usage would involve passing in environment variables as a kwargs object, or your own kwargs for custom
    configurations in tests.

    Example kwargs:
        dict(
            READER_DATABASE_HOST="localhost.ro",
            READER_DATABASE_PORT="3306",
            READER_DATABASE_USERNAME="readuser",
            READER_DATABASE_PASSWORD_KEY="read_user_password",
            WRITER_DATABASE_HOST="localhost",
            WRITER_DATABASE_PORT="3306",
            WRITER_DATABASE_USERNAME="writeuser",
            WRITER_DATABASE_PASSWORD_KEY="write_user_password",
            DATABASE_NAME="local_product_db"
        )

        :returns: dict(
            DATABASE_HOST="localhost.ro",
            DATABASE_PORT="3306",
            DATABASE_USERNAME="readuser",
            DATABASE_PASSWORD_KEY="read_user_password",
            DATABASE_NAME="local_product_db"
        )
    :param kwargs: keyword arguments that will be normalized to a generic database config
    :return: dict object that can be fed into DatabaseContext for a reader config
    """
    retval = dict(
        DATABASE_HOST=kwargs.get('READER_DATABASE_HOST', kwargs.get('DATABASE_HOST', None)),
        DATABASE_PORT=kwargs.get('READER_DATABASE_PORT', kwargs.get('DATABASE_PORT', None)),
        DATABASE_USERNAME=kwargs.get('READER_DATABASE_USERNAME', kwargs.get('DATABASE_USERNAME', None)),
        DATABASE_PASSWORD_KEY=kwargs.get('READER_DATABASE_PASSWORD_KEY', kwargs.get('DATABASE_PASSWORD_KEY', None)),
        DATABASE_NAME=kwargs.get('DATABASE_NAME', None),
    )
    return retval


def get_database_writer_config(**kwargs) -> dict:
    """
    Returns a dictionary object using the standard config inputs for DatabaseContext objects to represent the config
    needed to connect to a writer node on a database.

    General usage would involve passing in environment variables as a kwargs object, or your own kwargs for custom
    configurations in tests.

    Example kwargs:
        dict(
            READER_DATABASE_HOST="localhost.ro",
            READER_DATABASE_PORT="3306",
            READER_DATABASE_USERNAME="readuser",
            READER_DATABASE_PASSWORD_KEY="read_user_password",
            WRITER_DATABASE_HOST="localhost",
            WRITER_DATABASE_PORT="3306",
            WRITER_DATABASE_USERNAME="writeuser",
            WRITER_DATABASE_PASSWORD_KEY="write_user_password",
            DATABASE_NAME="local_product_db"
        )

        :returns: dict(
            DATABASE_HOST="localhost",
            DATABASE_PORT="3306",
            DATABASE_USERNAME="writeuser",
            DATABASE_PASSWORD_KEY="write_user_password",
            DATABASE_NAME="local_product_db"
        )

    :param kwargs: keyword arguments that will be normalized to a generic database config
    :return: dict object that can be fed into DatabaseContext for a writer config
    """
    retval = dict(
        DATABASE_HOST=kwargs.get('WRITER_DATABASE_HOST', kwargs.get('DATABASE_HOST', None)),
        DATABASE_PORT=kwargs.get('WRITER_DATABASE_PORT', kwargs.get('DATABASE_PORT', None)),
        DATABASE_USERNAME=kwargs.get('WRITER_DATABASE_USERNAME', kwargs.get('DATABASE_USERNAME', None)),
        DATABASE_PASSWORD_KEY=kwargs.get('WRITER_DATABASE_PASSWORD_KEY', kwargs.get('DATABASE_PASSWORD_KEY', None)),
        DATABASE_NAME=kwargs.get('DATABASE_NAME', None),
    )
    return retval
