import warnings

from pymysql import Connection as PyMySQLConnection

from .connection import Connection
from .database_helpers import _parse_context_attrs
from kasasa_common.context import DatabaseContext
from kasasa_common.logger import logger


def get_connection(context: DatabaseContext = None, connection: Connection = None, **kwargs) -> PyMySQLConnection:
    """
    Given a DatabaseContext object or a Connection object, return an instance of a PyMySQLConnection

    For a DatabaseContext argument, _get_mysql_connection will be called and kwargs will be passed

    :param context: optional DatabaseContext object
    :param connection: optional Connection object
    :param kwargs: to be passed to the connecting function
    :return: None if no arguments provided else Connection object
    """
    warnings.warn("Use get_connection_object", DeprecationWarning)
    if connection:
        # This allows get_connection to be used with mock connections, allowing for testing of units that call it
        logger.debug('Using connection object received through arguments.')
        return connection
    elif context:
        db_dict = {**_parse_context_attrs(context), **kwargs}
        return _get_mysql_connection(**db_dict)
    return None


def get_connection_object(context: DatabaseContext = None, connection: Connection = None, **_kwargs):
    """
    Given a DatabaseContext object or a Connection object, return an instance of a
    kasasa_common Connection interface

    :param context: optional DatabaseContext object
    :param connection: optional Connection object
    :return: None if no arguments provided else Connection object
    """
    from .mysql_connection import MySQLConnection
    if connection:
        # This allows get_connection to be used with mock connections, allowing for testing of units that call it
        logger.debug('Using connection object received through arguments.')
        return connection
    elif context:
        retval = dict(
            mysql=MySQLConnection
        ).get(context.DATABASE_TYPE, None)(context)
        if not retval:
            raise ValueError("No valid DATABASE_TYPE existed in context")
        return retval
    raise ValueError("No context or connection provided")


def _get_mysql_connection(dict_cursor=False, unbuffered=False, **kwargs):
    """
    Obtain `pymysql.Connection <pymysql.connections.Connection>` instance
    for given DB url.

    :param bool dict_cursor: use `~pymysql.cursors.DictCursor` for cursors,
        so that cursor will return records as dicts rather than tuples.
        Shorthand for `cursorclass = pymysql.cursors.DictCursor`.

    :param bool unbuffered:
        use `~pymysql.cursors.SSCursor`
        which does not buffer all response data in memory.
        The downside is that it cannot report number of records
        and navigate them only forwards.
        This option can be combined with ``dict_cursor``
        which will result in `~pymysql.cursors.SSDictCursor`.

    :param kwargs: additional attributes to pass to `pymysql`.
        Common examples are ``password`` or ``database``.
    """
    import pymysql
    logger.info('Obtaining database connection...')

    params = dict()
    params['cursorclass'] = getattr(pymysql.cursors, '{}{}Cursor'.format(
        'SS' if unbuffered else '',
        'Dict' if dict_cursor else '',
    ))
    params.update(kwargs)

    if not all(params.get(k) for k in ('host', 'user', 'password')):
        raise ValueError('Host, user and password are mandatory and should be provided in kwargs')

    print_params = params.copy()
    print_params['password'] = '<redacted>'

    logger.debug('Connecting to DB using these credentials (password masked): %s', print_params)
    conn = pymysql.connect(**params)
    logger.debug('Obtained DB connection: %s', conn)

    return conn
