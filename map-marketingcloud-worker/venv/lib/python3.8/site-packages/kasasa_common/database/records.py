from typing import Tuple, Union, List


class Record:
    """
    Generic interface for a database record. A child of this class should define any attributes in the __init__
    and @property and @<propertyname>.setter as well as a field list
    """
    def __init__(self, record: Union[List, Tuple]):
        if len(self.field_list) != len(record):
            raise ValueError("record length ({r}) does not match field_list length ({f})".format(
                r=len(record),
                f=len(self.field_list)
            ))
        for i, field in enumerate(self.field_list):
            setattr(self, field, record[i])

    @property
    def field_list(self) -> Tuple:
        """A field list should return a list of the fields in the order they will be during a database insert"""
        raise NotImplementedError

    @property
    def field_list_for_sql(self) -> str:
        return f'`{"`, `".join(self.field_list)}`'

    @property
    def as_string(self) -> str:
        return f'({", ".join([self._format_for_string(getattr(self, field)) for field in self.field_list])})'

    @property
    def as_tuple(self) -> Tuple:
        return tuple(self.as_list)

    @property
    def as_list(self) -> List:
        return [getattr(self, field) for field in self.field_list]

    @staticmethod
    def _format_for_string(value):
        if type(value) is str:
            return f"'{value}'"
        else:
            return str(value)


class SurrogatePersonLink(Record):
    def __init__(self, record):
        self._surrogate_id = None
        self._person_link_id = None
        self._person_link_context_id = None
        super(SurrogatePersonLink, self).__init__(record)

    @property
    def field_list(self) -> Tuple:
        return "surrogate_id", "person_link_id", "person_link_context_id"

    @property
    def surrogate_id(self):
        return self._surrogate_id

    @surrogate_id.setter
    def surrogate_id(self, value):
        """type cast to int"""
        self._surrogate_id = int(value)

    @property
    def person_link_id(self):
        return self._person_link_id

    @person_link_id.setter
    def person_link_id(self, value):
        """type cast to str"""
        self._person_link_id = str(value)

    @property
    def person_link_context_id(self):
        return self._person_link_context_id

    @person_link_context_id.setter
    def person_link_context_id(self, value):
        """type cast to int"""
        self._person_link_context_id = int(value)
