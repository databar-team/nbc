from typing import Union, Callable


def get_indices(base_list: Union[list, tuple, set], target_list: Union[list, tuple, set]) -> tuple:
    """
    Given a base_list find all indices for items in the target list and return them.

    Assumes that all items in target_list exist in base_list.

    :param base_list: List or Tuple that will be accessed by using return indices
    :param target_list: List or Tuple that has the values for which indices are required
    :return:
    """
    return tuple([base_list.index(item) for item in target_list])


def get_formatter(action: str, *args, **kwargs) -> Callable:
    """
    Given an action, return the appropriate instantiated formatter using *args and **kwargs

    :param action: str matching an item in action_classes
    :param args:
    :param kwargs:
    :return:
    """
    from .formatter import Formatter, DateStringListFormatter, ListDeleter, NullIfFormatter, QuoteWrapFormatter, \
        RowJoinFormatter
    action_classes = {
        "delete": ListDeleter,
        "format_date": DateStringListFormatter,
        "nullif": NullIfFormatter,
        "quote": QuoteWrapFormatter,
        "row_join": RowJoinFormatter
    }

    def get_wrapper() -> Formatter:
        format_class = action_classes.get(action, None)
        return format_class(*args, **kwargs) if format_class is not None else None
    return get_wrapper
