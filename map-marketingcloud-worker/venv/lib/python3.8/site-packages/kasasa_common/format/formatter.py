from typing import Union, List, Tuple

from .err import FormatterError
from kasasa_common import logger


class Formatter:
    def format(self, item):
        """Performs the format operation on the provided item and returns the result based on the child class"""
        raise NotImplementedError


class ListFormatter(Formatter):
    """
    For returning a formatted copy of a list.
    """
    def __init__(self, indices: Union[List[int], Tuple[int]] = (), *args, **kwargs) -> None:
        super(ListFormatter, self).__init__(*args, **kwargs)
        self.indices: tuple = tuple(indices)

    def format(self, item: list) -> list:
        """
        Performs a format operation on the provided list or tuple and returns it as a list
        :param item: list or tuple
        :return: list
        """
        raise NotImplementedError


class DateStringListFormatter(ListFormatter):
    """
    For formatting dates at given indices.

    config example:
    dict(
        input=dict(
            format_string="%Y-%m-%d %H:%M:%S",
            end_offset=-3  # Removes characters from the end.
        ),
        output=dict(
            format_string="%Y-%m-%d %H:%M:%S"
        )
    )


    """
    def __init__(self, config: dict = None, input_config: dict = None, output_config: dict = None,
                 *args, **kwargs) -> None:
        super(DateStringListFormatter, self).__init__(*args, **kwargs)
        if config is None:
            config = dict()
        self.config: dict = config
        self._input_config: dict = input_config or self.config.get('input', dict(format_string="%Y-%m-%d %H:%M:%S"))
        if self._input_config is None:
            raise ValueError("No input config presented. This is required.")
        self._output_config: dict = output_config or self.config.get('output', dict(format_string="%Y-%m-%d %H:%M:%S"))

    def format(self, list_to_format: list) -> list:
        """
        For every index in the list, modify the date with the initialized config

        :param list_to_format: List to perform the formatting on
        :return: list of the row with the operation performed
        """
        from datetime import datetime

        retval = list_to_format.copy()
        for i in self.indices:
            item = list_to_format[i]
            try:
                if self._input_config.get('end_offset', None) is not None:
                    item = item[:self._input_config.get('end_offset')]
                retval[i] = datetime.strptime(item, self._input_config.get('format_string')).strftime(
                    self._output_config['format_string'])
            except TypeError as te:
                logger.error(f"Attempted to format a datetime string, {item}, with "
                             f"{type(self._input_config.get('format_string'))} as format_string type")
                logger.error(te)
                raise FormatterError
            except ValueError as ve:
                logger.error(f"Attempted to format a datetime string, {item}, with "
                             f"{self._input_config.get('format_string')} as format_string value")
                logger.error(ve)
                raise FormatterError
        return retval


class ListDeleter(ListFormatter):
    """
    For deleting from a list at the given indices
    """

    def format(self, list_to_delete_from: list) -> list:
        """
        Performs a format operation on the provided list or tuple and returns it as a list

        :param list_to_delete_from: list
        :return: list
        """
        retval = list_to_delete_from.copy()
        for i in sorted(self.indices)[::-1]:  # delete from back of list forward
            retval.pop(i)
        return retval


class NullIfFormatter(ListFormatter):
    """
    For adding NULLIF to values that need it
    """

    def format(self, list_to_format: List[str]) -> List[str]:
        """
        Adds NULLIF to fields that are in list_to_format using the indices attribute

        :param list_to_format: list of fields to add NULLIF to
        :return:
        """
        retval = list_to_format.copy()
        for i in self.indices:
            retval[i] = "NULLIF('{value}', '')".format(value=list_to_format[i])
        return retval


class QuoteWrapFormatter(ListFormatter):
    """
    For adding quotes around list items that need it
    """

    def format(self, list_to_format: List[str]) -> List[str]:
        """
        Adds NULLIF to fields that are in list_to_format using the indices attribute

        :param list_to_format: list of fields to add NULLIF to
        :return:
        """
        retval = list_to_format.copy()
        for i in self.indices:
            retval[i] = '"{value}"'.format(value=list_to_format[i])
        return retval


class RowJoinFormatter(ListFormatter):
    """
    Joins a row together for insert into the SQL
    """

    def format(self, list_to_format: list) -> str:
        """
        Joins a list into a string that will be consumed in SQL

        :param list_to_format: list object to join and return
        :return:
        """
        retval = ', '.join(list_to_format)
        return "({value})".format(value=retval)