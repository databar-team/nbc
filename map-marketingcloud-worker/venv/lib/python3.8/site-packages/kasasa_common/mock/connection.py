import inspect


class MockCursor:

    def __init__(self, attributes):
        self.attributes = attributes
        self.sql = []
        self.args = []
        self.kwargs = []

    def __enter__(self):
        return self

    def __exit__(self, *args):
        pass

    def execute(self, sql=None, *args, **kwargs):
        """The 'execute' attribute can be sent with a dictionary that holds actions"""
        if sql:
            self.sql.append(sql)
        if len(args) > 0:
            self.args.append(args)
        if len(kwargs) > 0:
            self.kwargs.append(kwargs)
        actions = self.attributes.get('execute')
        if inspect.isclass(actions) and issubclass(actions, Exception):
            action = self.attributes.pop('execute')
            raise action
        if isinstance(actions, dict):
            for key in actions.keys():
                if key == 'nosql':
                    return actions.get('nosql')
                elif key in args[0]:
                    if isinstance(actions.get(key), dict):
                        if actions.get(key).get('fetchall'):
                            self.attributes['fetchall'] = actions.get(key).get('fetchall')
                        return actions.get(key).get('result')
                    return actions.get(key)
                raise KeyError('Key not found in provided mock data')
        return self.attributes.get('execute') or 0

    def fetchall(self, *args, **kwargs):
        actions = self.attributes.get('fetchall')
        if inspect.isclass(actions) and issubclass(actions, Exception):
            raise actions
        elif isinstance(actions, dict) and actions.get('ordered_actions'):
            return self.attributes.get('fetchall').get('ordered_actions').pop(0)
        return actions

    def fetchone(self, *args, **kwargs):
        actions = self.attributes.get('fetchone')
        if inspect.isclass(actions) and issubclass(actions, Exception):
            raise actions
        elif isinstance(actions, dict) and actions.get('ordered_actions'):
            return self.attributes.get('fetchall').get('ordered_actions').pop(0)
        return actions

    def fetchone(self, *args, **kwargs):
        actions = self.attributes.get('fetchmany')
        if inspect.isclass(actions) and issubclass(actions, Exception):
            raise actions
        elif isinstance(actions, dict) and actions.get('ordered_actions'):
            return self.attributes.get('fetchall').get('ordered_actions').pop(0)
        return actions


class MockConnection:
    """
    Mock connection class replicating a PyMySQL Connection and overwriting any interfaces.
    """
    def __init__(self, attributes=dict(), *args, **kwargs):
        self._attributes = attributes
        self._cursor = MockCursor(self._attributes)
        self._args = None

    def __enter__(self):
        return self

    def __exit__(self, *args):
        pass

    @property
    def sql(self):
        return self._cursor.sql

    @property
    def args(self):
        return self._cursor.args if self._cursor.args else self._args

    @property
    def kwargs(self):
        return self._cursor.kwargs

    def cursor(self):
        return self._cursor

    def commit(self, *args, **kwargs):
        return self._attributes.get('commit')

    def close(self, *args, **kwargs):
        return self._attributes.get('close')

    # Overwriting interfaces provided by parent class. Implement any as needed.
    def affected_rows(self): raise NotImplementedError

    def autocommit(self): raise NotImplementedError

    def begin(self): raise NotImplementedError

    def character_set_name(self): raise NotImplementedError

    def connect(self): raise NotImplementedError

    def escape(self): raise NotImplementedError

    def get_autocommit(self): raise NotImplementedError

    def get_host_info(self): raise NotImplementedError

    def get_proto_info(self): raise NotImplementedError

    def get_server_info(self): raise NotImplementedError

    def insert_id(self): raise NotImplementedError

    def kill(self): raise NotImplementedError

    def literal(self): raise NotImplementedError

    def next_result(self): raise NotImplementedError

    def open(self): raise NotImplementedError

    def ping(self): raise NotImplementedError

    def query(self): raise NotImplementedError

    def rollback(self): raise NotImplementedError

    def select_db(self): raise NotImplementedError

    def set_charset(self): raise NotImplementedError

    def show_warnings(self): raise NotImplementedError

    def thread_id(self): raise NotImplementedError

    def write_packet(self): raise NotImplementedError
