from queue import Queue
from typing import Union, Any

from kasasa_common.queue.thread_safe_queue_interface import ThreadSafeQueueInterface


class MemoryQueue(ThreadSafeQueueInterface):
    """MemoryQueue is an interface into a standard queue.Queue type of queue."""
    def __init__(self, max_size: int = 0):
        super(MemoryQueue, self).__init__("memory")
        self.max_size = max_size
        self.queue = Queue(maxsize=max_size)

    @property
    def empty(self):
        return self.queue.empty()

    @property
    def full(self):
        return self.queue.full()

    def _put(self, item: Any, block: bool, timeout: Union[int, None]):
        self.queue.put(item, block, timeout)

    def _get(self, block: bool, timeout: Union[int, None]):
        return self.queue.get(block, timeout)

    def _task_done(self):
        """Queue tracks which thread is working on a task, so MemoryQueue does not need to."""
        self.queue.task_done()

    def _join(self):
        self.queue.join()
