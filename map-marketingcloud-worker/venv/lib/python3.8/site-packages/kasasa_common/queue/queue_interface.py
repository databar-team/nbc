from typing import Any, Union


class QueueInterface:
    def __init__(self, queue_type: str):
        self.queue_type = queue_type

    @property
    def empty(self):
        """
        :return:
        """
        raise NotImplementedError

    @property
    def full(self):
        raise NotImplementedError

    def put(self, item: Any, block: bool = False, timeout: Union[int, None] = None):
        """
        Puts an item on the queue waiting before failing if requested. Raises queue.Full error in the event of the queue
        being at it's max size.

        If optional args block and timeout are set, put will wait for the given timeout before raising a queue.Full
        error.

        The default behavior is to not wait and raise queue.Full immediately, if the queue type supports that behavior.

        :param item: Item to put on the queue can be any type supported by the queue_type
        :param block: Boolean value defining if put should wait before raising queue.Full
        :param timeout: Integer defining how long put should wait before raising queue.Full
        :return:
        """
        return self._put(item, block, timeout)

    def _put(self, item: Any, block: bool, timeout: Union[int, None]):
        raise NotImplementedError

    def get(self, block: bool = False, timeout: Union[int, None] = None):
        """
        Remove and return an item from the queue.

        If optional args block and timeout are set, get will wait for the given timeout before raising a queue.Empty
        error.

        The default behavior is to raise queue.Empty immediately, if the queue type supports that behavior.

        :param block: Boolean value defining if get should wait before raising queue.Empty
        :param timeout: Integer defining how long get should wait before raising queue.Empty
        :return:
        """
        return self._get(block, timeout)

    def _get(self, block: bool, timeout: Union[int, None]):
        raise NotImplementedError

    def task_done(self):
        """
        Mark the task assigned to the calling function as complete.

        :return:
        """
        return self._task_done()

    def _task_done(self):
        raise NotImplementedError
