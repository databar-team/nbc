from logging import Logger
from kasasa_common.context.context import VaultContext


class VaultSupport(object):
    """
        Expected Attributes to context:
            VAULT_ADDRESS
            VAULT_APPROLE_PATH
            VAULT_APPROLE_SECRET_ID
            VAULT_SECRET_KEY

        Based heavily on work done for seed-lambda project:
            http://git.bvops.net/projects/POC/repos/seed-lambda/browse/src/configuration_reader.py
    """
    def __init__(self, logger: Logger, context: VaultContext):
        self.logger = logger
        self._context = context

    def _get_vault_approle(self, vault_approle_path):
        """
        Retrieves the vault approle from the given vault_approle_path on S3
        and returns the retrieved value.

        Args:
            vault_approle_path: The S3 path to the vault approle.
            e.g. bucket/prefix/to/key.txt

        Returns: The vault approle
        """
        from kasasa_common.aws import get_s3

        self.logger.debug('Accessing vault approle.')
        # Get local S3 values if available.
        bucket = get_s3(vault_approle_path.replace('s3://', '').split("/")[0])
        key = "/".join(vault_approle_path.replace('s3://', '').split("/")[1:])
        self.logger.debug('bucket: {bucket}; key: {key}'.format(bucket=bucket.bucket, key=key))
        # Get the vault approle object at the bucket and key above.
        vault_approle = bucket.fetch(key)

        self.logger.debug('Successfully read vault approle role_id and secret_id.')
        return vault_approle

    def get_secrets(self) -> dict:
        """
        Retrieve values stored in vault.

        Args:
            None

        Returns: Map of vault secrets.
        """
        import hvac

        # Vault is available over https in AWS. Therefore,
        # default to https.
        # Set VAULT_PROTOCOL to http for local development.

        try:
            vault_addr = getattr(self._context, 'VAULT_ADDRESS', None)
            if vault_addr is not None:
                vault_client = hvac.Client(url=vault_addr)

                vault_approle_path = getattr(self._context, 'VAULT_APPROLE_PATH', None)
                if not vault_approle_path:
                    raise AssertionError("VAULT_APPROLE_PATH value not found")

                vault_approle_secret_id = getattr(self._context, 'VAULT_APPROLE_SECRET_ID', None)
                if not vault_approle_secret_id:
                    raise AssertionError("VAULT_APPROLE_SECRET_ID value not found")

                # Allow the caller to override the key to read the secret from
                # for local development.
                vault_secret_key = getattr(self._context, 'VAULT_SECRET_KEY', None)
                if not vault_secret_key:
                    raise AssertionError("VAULT_SECRET_KEY value not found")

                vault_approle = self._get_vault_approle(vault_approle_path)

                # See [Perform the login operation to fetch a new Vault token]
                # (https://www.vaultproject.io/docs/auth/approle.html#perform-the-login-operation-to-fetch-a-new-vault-token-)
                # for response format.
                auth_result = vault_client.auth_approle(vault_approle, vault_approle_secret_id)
                vault_client.token = auth_result['auth']['client_token']
                if not vault_client.is_authenticated():
                    raise AssertionError("vault client is not authenticated")

                # See [Read Secret sample response]
                # (https://www.vaultproject.io/api/secret/generic/index.html#sample-response)
                # for response format.
                read_result = vault_client.read('secret/{vault_secret_key}'.format(vault_secret_key=vault_secret_key))
                vault_values = read_result['data']

                self.logger.debug('Successfully retrieved secrets from {vault_secret_key}.'.format(vault_secret_key=vault_secret_key))
                return vault_values
            else:
                self.logger.debug('Unable to acquire secrets')
                return {}
        except Exception as e:
            self.logger.error(e, exc_info=True)
            raise


def get_vault_secrets(context: VaultContext, logger: Logger = None) -> dict:
    """
    Retrieve the values stored in vault for the lambda.

    Args:
        logger: The logger instance to use
        context: dictionary config for connecting to vault

    Returns: Map of vault values.

    """
    if not context:
        raise
    if not logger:
        from kasasa_common.logger import logger
    return VaultSupport(logger, context).get_secrets()
